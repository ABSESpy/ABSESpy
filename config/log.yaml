
version: 1
disable_existing_loggers: true

formatters:
  standard:
    format: "[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s"
    datefmt: '%H:%M:%S'
  project:
    format: "[%(asctime)s] %(levelname)s %(message)s"
    datefmt: '%H:%M:%S'

handlers:
  console:  # handler which will log into stdout
    class: logging.StreamHandler
    level: WARN
    formatter: standard  # Use formatter defined above
    stream: ext://sys.stdout
  warn:  # handler which will log into file
    class: logging.handlers.RotatingFileHandler
    level: WARN
    formatter: standard  # Use formatter defined above
    filename: logs/warnings.log
    maxBytes: 10485760 # 10MB
    backupCount: 10
    encoding: utf8
  debug:  # handler which will log into file
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: project  # Use formatter defined above
    filename: logs/debug.log
    maxBytes: 10485760 # 10MB
    backupCount: 10
    encoding: utf8

root:  # Loggers are organized in hierarchy - this is the root logger config
  level: INFO
  handlers: [console, warn, debug]  # Attaches both handler defined above


# 私人使用如下设置
# CONFIG_PATH = os.path.join(os.getcwd(), "log.yaml")
# with open(CONFIG_PATH, "rt") as f:
#     config_data = yaml.safe_load(f.read())
#     logging.config.dictConfig(config_data)


# class StreamToLogger(object):
#     """
#     Fake file-like stream object that redirects writes to a logger instance.
#     """

#     def __init__(self, logger, log_level=logging.INFO):
#         self.logger = logger
#         self.log_level = log_level
#         self.linebuf = ""

#     def write(self, buf):
#         for line in buf.rstrip().splitlines():
#             self.logger.log(self.log_level, line.rstrip())


# def clean_logs():
#     handlers = config_data.get("handlers")
#     removed_handlers = []
#     for handler, configs in handlers.items():
#         filename = configs.get("filename")
#         if not filename:
#             continue
#         file_path = os.path.join(os.getcwd(), filename)
#         open(file_path, "w").close()
#         removed_handlers.append(handler)
#     logging.warning(f"Logs of {removed_handlers} cleared.")
